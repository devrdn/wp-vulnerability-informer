package filestorage

import (
	"encoding/json"
	"os"

	"github.com/devrdn/wp-vulnerability-informer/internal/models"
)

type Storage struct {
	filePath string
}

func New(filePath string) (*Storage, error) {
	// If the file doesn't exist, create it
	_, err := os.Stat(filePath)
	if err != nil {
		if os.IsNotExist(err) {
			file, err := os.Create(filePath)
			if err != nil {
				return nil, err
			}
			err = json.NewEncoder(file).Encode(make(map[string]struct{}, 1))
			if err != nil {
				return nil, err
			}
			defer file.Close()
		} else {
			return nil, err
		}
	}

	return &Storage{
		filePath: filePath,
	}, nil
}

// Save encodes and saves the provided map of vulnerabilities to the storage.
func (s *Storage) Save(vulnerabilities map[string]*models.Vulnerability) error {
	// creates new file with vulnerability
	file, err := os.Create(s.filePath)
	if err != nil {
		return err
	}
	defer file.Close()

	// read and encode the information
	enc := json.NewEncoder(file)
	plug := make(map[string]struct{}, len(vulnerabilities))
	for key, _ := range vulnerabilities {
		plug[key] = struct{}{}
	}

	err = enc.Encode(&plug)
	if err != nil {
		return err
	}
	return nil
}

// Get retrieves a map of vulnerabilities from the storage.
func (s *Storage) Get() (map[string]struct{}, error) {
	// open file with vulnerabilities
	file, err := os.OpenFile(s.filePath, os.O_RDONLY, 0644)
	if err != nil {
		return nil, err
	}
	defer file.Close()

	// read and decode the information
	dec := json.NewDecoder(file)
	m := make(map[string]struct{})
	err = dec.Decode(&m)
	if err != nil {
		return nil, err
	}
	return m, nil
}
