package sqlite

import (
	"context"
	"database/sql"
	"errors"
	"github.com/devrdn/wp-vulnerability-informer/internal/storage"
	"github.com/mattn/go-sqlite3"
	"time"

	"github.com/devrdn/wp-vulnerability-informer/internal/models"
)

var (
	ErrOpenFile = errors.New("storage: error open database file")
)

type Storage struct {
	db *sql.DB
}

func New(dbPath string) (*Storage, error) {
	db, err := sql.Open("sqlite3", dbPath)
	if err != nil {
		return nil, ErrOpenFile
	}

	ctx, cancel := context.WithTimeout(context.Background(), 3*time.Second)
	defer cancel()

	if err := db.PingContext(ctx); err != nil {
		return nil, err
	}

	return &Storage{
		db: db,
	}, nil
}

// Save encodes and saves the provided map of vulnerabilities to the storage.
func (s *Storage) Save(vulnerability *models.Vulnerability) error {
	const query = `
		INSERT INTO vulnerability 
			(slug)
		VALUES 
		    ($1)`

	ctx, cancel := context.WithTimeout(context.Background(), 3*time.Second)
	defer cancel()

	_, err := s.db.ExecContext(ctx, query, vulnerability.ID)
	if err != nil {
		var sqlError sqlite3.Error

		if errors.As(err, &sqlError) {
			if errors.Is(sqlError.Code, sqlite3.ErrConstraint) {
				return storage.ErrRecordAlreadyExist
			}
		}

		return err
	}

	return nil
}

// Get retrieves a map of vulnerabilities from the storage.
func (s *Storage) Get() (map[string]struct{}, error) {
	const query = `
		SELECT * from vulnerability`

	ctx, cancel := context.WithTimeout(context.Background(), 3*time.Second)
	defer cancel()

	rows, err := s.db.QueryContext(ctx, query)
	if err != nil {
		return nil, err
	}

	defer rows.Close()
	ids := make(map[string]struct{}, 12000)

	for rows.Next() {
		var id string
		err := rows.Scan(&id)
		if err != nil {
			return nil, err
		}
		ids[id] = struct{}{}
	}

	if err = rows.Err(); err != nil {
		return nil, err
	}

	return ids, err
}
