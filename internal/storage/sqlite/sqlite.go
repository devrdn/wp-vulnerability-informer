package sqlite

import (
	"context"
	"database/sql"
	"errors"
	"github.com/devrdn/wp-vulnerability-informer/internal/models"
	"github.com/devrdn/wp-vulnerability-informer/internal/storage"
	"github.com/mattn/go-sqlite3"
	"time"

	_ "github.com/golang-migrate/migrate/v4/database/sqlite3"
)

type Storage struct {
	db *sql.DB
}

var (
	ErrOpenFile = errors.New("storage: error open database file")
)

// New creates the instance of Storage
func New(dbPath string) (*Storage, error) {
	db, err := sql.Open("sqlite3", dbPath)
	if err != nil {
		return nil, ErrOpenFile
	}

	ctx, cancel := context.WithTimeout(context.Background(), 3*time.Second)
	defer cancel()

	if err := db.PingContext(ctx); err != nil {
		return nil, err
	}

	return &Storage{
		db: db,
	}, nil
}

// The Save method preserves the vulnerability in the database
// and returns an error if it is not unique.
func (s *Storage) Save(vulnerability *models.Vulnerability) error {
	const query = `
		INSERT INTO vulnerability 
			(slug)
		VALUES 
		    ($1)`

	ctx, cancel := context.WithTimeout(context.Background(), 3*time.Second)
	defer cancel()

	_, err := s.db.ExecContext(ctx, query, vulnerability.Slug)
	if err != nil {
		var sqlError sqlite3.Error

		if errors.As(err, &sqlError) {
			if errors.Is(sqlError.Code, sqlite3.ErrConstraint) {
				return storage.ErrRecordAlreadyExist
			}
		}

		return err
	}

	return nil
}

// IfEmpty checks if storage is Empty
func (s *Storage) IsEmpty() (bool, error) {
	const query = `
		SELECT 
		    count(*) 
		FROM 
		    vulnerability`

	var count int

	ctx, cancel := context.WithTimeout(context.Background(), 3*time.Second)
	defer cancel()

	err := s.db.QueryRowContext(ctx, query).Scan(&count)
	if err != nil {
		return false, err
	}

	if count == 0 {
		return true, nil
	}

	return false, nil
}
