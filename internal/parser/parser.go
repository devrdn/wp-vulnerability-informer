package parser

import (
	"encoding/json"
	"github.com/devrdn/wp-vulnerability-informer/internal/config"
	"github.com/devrdn/wp-vulnerability-informer/internal/models"
	"github.com/gocolly/colly/v2"
	"net/http"
)

const (
	ElVulnPageWrapper = "div#app-wrapper"
	ElVulnSingle      = ".threat-intel-vulns-table tbody tr"
	ElVulnName        = "div.container h1.text-center"
	ElVulnDesc        = "div.card-body h3 + p"
	ElVulnLink        = "td:first-child a"
	ElVulnSeverity    = "div.card-body .cvss-score-chart span"
	ElVulnDate        = "div.card-body table.table-sm tbody tr:nth-child(3) td.text-right"
	ElVulnVersion     = "section.mb-5 .col-12:first-child div.card-body table.table.no-first-row-border tr:nth-child(5) td"
	ElVulnType        = "section.mb-5 .col-12:first-child div.card-body table.table.no-first-row-border tr:nth-child(1) td"
)

type Parser struct {
	url   string
	limit int
	c     *colly.Collector
}

func New(cfg config.Config) *Parser {
	return &Parser{
		url:   cfg.BaseUrl,
		limit: cfg.PaginationLimit,
		c:     colly.NewCollector(),
	}
}

// The Parse method parses the page with WordPress vulnerabilities
// from public database and return array of vulnerabilities
func (p *Parser) Parse() (map[string]*models.Vulnerability, error) {
	m := make(map[string]*models.Vulnerability, 11500)

	resp, err := http.Get(p.url)
	if err != nil {
		return nil, err
	}

	err = json.NewDecoder(resp.Body).Decode(&m)
	if err != nil {
		return nil, err
	}

	return m, nil
}
