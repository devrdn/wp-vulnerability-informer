package updater

import (
	"errors"
	"github.com/devrdn/wp-vulnerability-informer/internal/bot"
	"github.com/devrdn/wp-vulnerability-informer/internal/models"
	"github.com/devrdn/wp-vulnerability-informer/internal/parser"
	"github.com/devrdn/wp-vulnerability-informer/internal/storage"
	"time"
)

type Updater struct {
	sendToBot bool
	storage   storage.Storage
	parser    *parser.Parser
	bot       *bot.Bot
}

func New(sendToBot bool, bot *bot.Bot, storage storage.Storage, parser *parser.Parser) *Updater {
	return &Updater{
		sendToBot: sendToBot,
		bot:       bot,
		storage:   storage,
		parser:    parser,
	}
}

// Update method updates information about wp vulnerabilities
// and sends to telegram bot
func (u *Updater) Update() error {
	vulnerabilities, err := u.parser.Parse()
	if err != nil {
		u.bot.SendToOwner(err.Error())
		return err
	}

	var newVulnerabilities []models.Vulnerability

	// process vulnerabilities
	for _, v := range vulnerabilities {
		err := u.storage.Save(&v)
		if err != nil {
			if errors.Is(err, storage.ErrRecordAlreadyExist) {
				continue
			}
			return err
		}

		newVulnerabilities = append(newVulnerabilities, v)
	}

	// send data to telegram informer if table is not empty
	if u.sendToBot || len(newVulnerabilities) <= 15 {
		for _, v := range newVulnerabilities {
			u.bot.SendToChannel(v)
			time.Sleep(time.Second)
		}
	}

	return nil
}
