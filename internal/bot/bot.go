package bot

import (
	"errors"
	"log"

	"github.com/devrdn/wp-vulnerability-informer/internal/models"
	tele "gopkg.in/telebot.v3"
	"gopkg.in/telebot.v3/layout"
	"gopkg.in/telebot.v3/middleware"
)

type Bot struct {
	*tele.Bot
	owner   tele.ChatID
	channel tele.ChatID
}

var (
	ErrFailedParseLayout = errors.New("informer: failed to parse informer layout")
	ErrFailedCreateBot   = errors.New("informer: failed to create new informer")
	ErrSendOwner         = errors.New("üõë informer: error when sending a message to the owner")
)

// New creates a new Bot instance
func New(configPath string, owner, channel int) (*Bot, error) {
	lt, err := layout.New(configPath)
	if err != nil {
		return nil, ErrFailedParseLayout
	}

	b, err := tele.NewBot(lt.Settings())
	if err != nil {
		return nil, ErrFailedCreateBot
	}

	return &Bot{
		Bot:     b,
		owner:   tele.ChatID(owner),
		channel: tele.ChatID(channel),
	}, nil
}

// Run initiates the execution of the Bot.
// It sets up command handlers for various commands
func (b *Bot) Run() {
	b.Handle("/ping", func(c tele.Context) error {
		return c.Send("üèì pong")
	}, middleware.Whitelist(int64(b.owner)))

	b.Send(b.owner, "informer: successfully started", tele.Silent)

	b.Start()
}

// SendToChannel method sends information of new vulnerabilities
// to telegram informer channel
func (b *Bot) SendToChannel(vulnerability models.Vulnerability) {
	_, err := b.Send(
		b.channel,
		vulnerability.String(),
		tele.NoPreview,
	)
	if err != nil {
		//b.SendToOwner(fmt.Sprintf("üõë informer: error when sending a message to the channel: %s", err))
		log.Println(err)
		return
	}
}

// SendToOwner method sends message to Bot owner
func (b *Bot) SendToOwner(text string, opts ...interface{}) {
	_, err := b.Send(b.owner, text, opts...)
	if err != nil {
		b.OnError(ErrSendOwner, nil)
	}
}
