package models

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"github.com/mattn/go-sqlite3"
	"time"
)

const textFormat = `
<b>üîå %s [‚ö°Ô∏è %s]</b>

<b>Version: </b> %s
<b>Description: </b> %s
<b>Published: </b> %s

<a href="%s">Detailed Information ... </a>
`

type Vulnerability struct {
	Slug        string
	Type        string
	Name        string
	Version     string
	Description string
	Severity    string
	Link        string
	Date        time.Time
}

func (v Vulnerability) String() string {
	return fmt.Sprintf(textFormat, v.Name, v.Severity, v.Version, v.Description, v.Date, v.Link)
}

var (
	ErrVulnerabilityExist = errors.New("models: vulnerability already exists")
)

type VulnerabilityModel struct {
	db *sql.DB
}

func NewVulnerability(db *sql.DB) *VulnerabilityModel {
	return &VulnerabilityModel{
		db: db,
	}
}

func (m *VulnerabilityModel) Insert(vulnerability *Vulnerability) error {
	const query = `
		INSERT INTO vulnerability 
			(slug)
		VALUES 
		    ($1)`

	ctx, cancel := context.WithTimeout(context.Background(), 3*time.Second)
	defer cancel()

	_, err := m.db.ExecContext(ctx, query, vulnerability.Slug)
	if err != nil {
		var sqlError sqlite3.Error

		if errors.As(err, &sqlError) {
			if errors.Is(sqlError.Code, sqlite3.ErrConstraint) {
				return ErrVulnerabilityExist
			}
		}

		return err
	}

	return nil
}
