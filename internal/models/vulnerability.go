package models

import (
	"fmt"
	"html"
	"log"
	"strings"
	"time"
)

const (
	TypePlugin = "plugin"
	TypeTheme  = "theme"
)

const textFormat = `
📌 <b>%s</b>

⚡️ <b>Severity:</b> %.2f [<b>%s</b>]

📃 <b>Description:</b> %s
📅 <b>Published:</b> %s

🎲 <b>SoftWare:</b>
%s
<a href="%s">Detailed Information ... </a>
`

const softwareFormat = `
▶️ <b>Name:</b> %s
%c <b>Type:</b> %s
🌐 <b>Versions:</b> 
%s
`

type Vulnerability struct {
	ID          string     `json:"id"`
	Title       string     `json:"title"`
	Description string     `json:"description"`
	References  []string   `json:"references"`
	Software    []software `json:"software"`
	CVSS        struct {
		Score  float64 `json:"score"`
		Rating string  `json:"rating"`
	} `json:"cvss"`
	Published string `json:"published"`
}

type software struct {
	Type    string  `json:"type"`
	Name    string  `json:"name"`
	Version version `json:"affected_versions"`
}

type version map[string]struct {
	FromVersion string `json:"from_version"`
	ToVersion   string `json:"to_version"`
}

func (v version) String() string {
	var pairs []string
	for k, _ := range v {
		pairs = append(pairs, fmt.Sprintf("\t — %s", k))
	}
	return strings.Join(pairs, "\n")
}

func (s software) String() string {
	var vulnerabilityType rune
	switch s.Type {
	case TypePlugin:
		vulnerabilityType = '🧩'
	case TypeTheme:
		vulnerabilityType = '🎨'
	default:
		vulnerabilityType = '🦠'
	}
	return fmt.Sprintf(softwareFormat, s.Name, vulnerabilityType, s.Type, s.Version)
}

func (v Vulnerability) getSoftware() string {
	var software []string
	for _, s := range v.Software {
		software = append(software, s.String())
	}
	return strings.Join(software, "\n")
}

func (v Vulnerability) String() string {
	published, err := time.Parse("2006-01-02 15:04:05", v.Published)
	if err != nil {
		log.Println(err)
	}

	return fmt.Sprintf(textFormat,
		html.EscapeString(v.Title),
		v.CVSS.Score,
		v.CVSS.Rating,
		html.EscapeString(v.Description),
		published.Format("Jan 2, 2006"),
		v.getSoftware(),
		v.References[0])
}
