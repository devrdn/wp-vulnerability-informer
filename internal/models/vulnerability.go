package models

import (
	"context"
	"database/sql"
	"errors"
	"time"
)

type Vulnerability struct {
	Slug        string
	Type        string
	Name        string
	Version     string
	Description string
	Severity    float32
	Link        string
	Date        time.Time
}

var (
	ErrVulnerabilityExist = errors.New("models: vulnerability already exists")
)

type VulnerabilityModel struct {
	db *sql.DB
}

func NewVulnerability(db *sql.DB) *VulnerabilityModel {
	return &VulnerabilityModel{
		db: db,
	}
}

func (m *VulnerabilityModel) Insert(vulnerability Vulnerability) error {
	const query = `
			INSERT INTO vulnerability 
				(slug, type, name, version, description, severity, link, date)
			VALUES 
			    ($1, $2, $3, $4, $5, $6, $7, $8)`

	ctx, cancel := context.WithTimeout(context.Background(), 3*time.Second)
	defer cancel()

	args := []interface{}{
		vulnerability.Slug,
		vulnerability.Type,
		vulnerability.Name,
		vulnerability.Version,
		vulnerability.Description,
		vulnerability.Severity,
		vulnerability.Link,
		vulnerability.Date,
	}

	result, err := m.db.ExecContext(ctx, query, args...)
	if err != nil {
		return err
	}

	rowsAffected, err := result.RowsAffected()
	if err != nil {
		return err
	}

	if rowsAffected == 0 {
		return ErrVulnerabilityExist
	}

	return nil
}
