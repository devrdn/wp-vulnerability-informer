package main

import (
	"errors"
	"fmt"
	"github.com/devrdn/wp-vulnerability-informer/internal/models"
	tele "gopkg.in/telebot.v3"
	"html"
	"time"
)

// processData processes a list of vulnerabilities, utilizing the provided vulnerability model.
// It checks each vulnerability's existence in the database; if it already exists, processing continues,
// otherwise the new vulnerability is saved to the database. At the end of execution, the function returns
// a list of all newly saved vulnerabilities.
func processData(vulnerabilities []*models.Vulnerability, vulnerability *models.VulnerabilityModel) ([]*models.Vulnerability, error) {
	var newVulnerabilities []*models.Vulnerability

	// process vulnerabilities
	for _, v := range vulnerabilities {
		err := vulnerability.Insert(v)
		if err != nil {
			if errors.Is(err, models.ErrVulnerabilityExist) {
				continue
			}
			return nil, err
		}

		newVulnerabilities = append(newVulnerabilities, v)

	}

	return newVulnerabilities, nil
}

// SendVulnerability method formats and sends new vulnerabilities
// to telegram bot
func SendVulnerability(vulnerabilities []*models.Vulnerability, b *Bot) error {
	// check if vulnerabilities was found
	if len(vulnerabilities) == 0 {
		_, err := b.Send(tele.ChatID(ChannelId), "Vulnerabilities not found")
		if err != nil {
			return err
		}
	}

	// send vulnerabilities to user
	for _, v := range vulnerabilities {
		text := fmt.Sprintf("Vulnerability: <b>%s</b>", html.EscapeString(v.Name))
		_, err := b.Send(tele.ChatID(ChannelId), text)
		if err != nil {
			return err
		}
		time.Sleep(1 * time.Second)
	}
	return nil
}
