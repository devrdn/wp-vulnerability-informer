package main

import (
	"errors"
	"github.com/devrdn/wp-vulnerability-informer/internal/models"
	"github.com/devrdn/wp-vulnerability-informer/internal/parser"
	"time"
)

// processData processes a list of vulnerabilities, utilizing the provided vulnerability model.
// It checks each vulnerability's existence in the database; if it already exists, processing continues,
// otherwise the new vulnerability is saved to the database. At the end of execution, the function returns
// a list of all newly saved vulnerabilities.
func processData(parser *parser.Parser, b *Bot, vulnerability *models.VulnerabilityModel) error {
	// parse vulnerabilities from page
	vulnerabilities, err := parser.Parse()
	if err != nil {
		b.SendToOwner(err.Error())
		return err
	}

	var newVulnerabilities []models.Vulnerability

	// process vulnerabilities
	for _, v := range vulnerabilities {
		err := vulnerability.Insert(v)
		if err != nil {
			if errors.Is(err, models.ErrVulnerabilityExist) {
				continue
			}
			return err
		}

		newVulnerabilities = append(newVulnerabilities, *v)
	}

	// send data to telegram bot
	for _, v := range newVulnerabilities {
		b.SendToChannel(v)
		time.Sleep(time.Second)
	}

	return nil
}
