package main

import (
	"flag"
	"github.com/devrdn/wp-vulnerability-informer/internal/storage"
	"github.com/devrdn/wp-vulnerability-informer/internal/storage/sqlite"
	"log"
	"time"

	"github.com/devrdn/wp-vulnerability-informer/internal/parser"
	_ "github.com/joho/godotenv/autoload"
	_ "github.com/mattn/go-sqlite3"
)

const (
	targetHour     = 00
	targetMinute   = 00
	defaultBaseURL = "https://www.wordfence.com/threat-intel/vulnerabilities?page="
)

type Config struct {
	paginationLimit int
	baseUrl         string
	Bot             struct {
		owner         int
		channel       int
		botConfigPath string
	}
}

func main() {
	var cfg Config

	// parse flags
	flag.IntVar(&cfg.paginationLimit, "pagination-limit", 5, "Pagination Limit")
	flag.StringVar(&cfg.baseUrl, "base-url", defaultBaseURL, "BaseUrl")
	flag.IntVar(&cfg.Bot.channel, "channel-id", -1001842465106, "Channel Id")
	flag.IntVar(&cfg.Bot.owner, "owner-id", 464058962, "Owner Id")
	flag.StringVar(&cfg.Bot.botConfigPath, "bcfg-path", "config/bot/bot.yml", "Bot Config Path")
	flag.Parse()

	// connect to db
	db, err := sqlite.New("sqlite3.db")
	if err != nil {
		log.Fatal(err)
	}

	// create new parser
	prs := parser.New(cfg.paginationLimit, cfg.baseUrl)
	storage := storage.New(db)

	// check if the records exists
	ifEmpty, err := storage.IfEmpty()
	if err != nil {
		log.Fatal(err)
	}
	sendToBot := !ifEmpty

	b, err := NewBot(cfg.Bot.botConfigPath, cfg.Bot.owner, cfg.Bot.channel)
	if err != nil {
		log.Fatal(err)
	}

	go b.Run()

	for {
		// process vulnerabilities and send data to bot
		err := vulnerabilityUpdate(sendToBot, prs, b, storage)
		if err != nil {
			log.Println(err)
		}

		now := time.Now()
		next := now.Add(time.Hour * 24)
		next = time.Date(next.Year(), next.Month(), next.Day(), targetHour, targetMinute, 0, 0, next.Location())

		time.Sleep(next.Sub(now))
	}

}
