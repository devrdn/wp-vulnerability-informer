package main

import (
	"github.com/devrdn/wp-vulnerability-informer/internal/bot"
	"github.com/devrdn/wp-vulnerability-informer/internal/config"
	"github.com/devrdn/wp-vulnerability-informer/internal/parser"
	"github.com/devrdn/wp-vulnerability-informer/internal/storage/sqlite"
	"github.com/devrdn/wp-vulnerability-informer/internal/updater"
	_ "github.com/joho/godotenv/autoload"
	_ "github.com/mattn/go-sqlite3"
	"log"
	"os"
	"time"
)

const (
	targetHour   = 00
	targetMinute = 00
)

func main() {
	if err := run(); err != nil {
		log.Fatal(err)
	}
	os.Exit(0)
}

// run the application
func run() error {
	cfg := config.MustLoad()

	// connect to db
	storage, err := sqlite.New("sqlite3://sqlite3.db")
	if err != nil {
		return err
	}

	// check if the records exists
	ifEmpty, err := storage.IsEmpty()
	if err != nil {
		return err
	}
	sendToBot := !ifEmpty

	// create new parser
	parser := parser.New(cfg)

	b, err := bot.New(cfg.Bot)
	if err != nil {
		return err
	}

	upd := updater.New(sendToBot, b, storage, parser)

	go b.Run()

	// process vulnerabilities and send data to informer
	for {
		err := upd.Update()
		if err != nil {
			return err
		}

		now := time.Now()
		next := now.Add(time.Hour * 24)
		next = time.Date(next.Year(), next.Month(), next.Day(), targetHour, targetMinute, 0, 0, next.Location())

		time.Sleep(next.Sub(now))
	}
}
