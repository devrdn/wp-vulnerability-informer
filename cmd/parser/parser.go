package main

import (
	"github.com/devrdn/wp-vulnerability-parser/internal/models"
	"github.com/gocolly/colly/v2"
	"log"
	"strconv"
	"time"
)

var (
	VulnerabilityNameEl     = "td:first-child"
	VulnerabilityLinkEl     = "td:first-child a"
	VulnerabilitySeverityEl = ".cvss-badge-column"
	VulnerabilityDateEl     = ".date-column"
	NextPageEl              = ".page-link[rel='next']"
)

// The Parse method parses the page with WordPress vulnerabilities
// from public database
func Parse(url string) ([]*models.Vulnerability, error) {
	c := colly.NewCollector()

	_ = c.Limit(&colly.LimitRule{Delay: 2 * time.Second})

	var vulnerabilities []*models.Vulnerability

	c.OnHTML(".threat-intel-vulns-table tbody tr", func(h *colly.HTMLElement) {
		vulnerability := &models.Vulnerability{}
		vulnerability.Name = h.ChildText(VulnerabilityNameEl)
		vulnerability.Link = h.ChildAttr(VulnerabilityLinkEl, "href")

		severity, err := strconv.ParseFloat(h.ChildText(VulnerabilitySeverityEl), 32)
		if err != nil {
			log.Println(err)
			return
		}

		vulnerability.Severity = float32(severity)

		date, err := time.Parse("January 2, 2006", h.ChildText(VulnerabilityDateEl))
		if err != nil {
			log.Println(err)
			return
		}

		vulnerability.Date = date

		vulnerabilities = append(vulnerabilities, vulnerability)
	})

	err := c.Visit(url)
	if err != nil {
		return nil, err
	}

	c.Wait()

	return vulnerabilities, nil
}
