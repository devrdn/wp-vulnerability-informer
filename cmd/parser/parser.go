package main

import (
	"database/sql"
	"fmt"
	"github.com/devrdn/wp-vulnerability-parser/internal/models"
	"github.com/gocolly/colly/v2"
	"log"
	"strconv"
	"time"
)

const (
	VulnerabilityNameEl     = "td:first-child"
	VulnerabilityLinkEl     = "td:first-child a"
	VulnerabilitySeverityEl = ".cvss-badge-column"
	VulnerabilityDateEl     = ".date-column"
	Url                     = "https://www.wordfence.com/threat-intel/vulnerabilities"
)

type Parser struct {
	db *sql.DB
}

func NewParser(db *sql.DB) Parser {
	return Parser{
		db: db,
	}
}

// The Parse method parses the page with WordPress vulnerabilities
// from public database
func (p *Parser) Parse() ([]*models.Vulnerability, error) {
	c := colly.NewCollector()

	_ = c.Limit(&colly.LimitRule{Delay: 2 * time.Second})

	var vulnerabilities []*models.Vulnerability

	c.OnHTML(".container", func(h *colly.HTMLElement) {
		vulnerability := &models.Vulnerability{}

		severity, err := strconv.ParseFloat(h.ChildText(".card-body .cvss-score-chart span"), 32)

		fmt.Println(h.Request.URL.String() + " | Yep | " + h.ChildText(".card-body .cvss-score-chart span"))
		if err != nil {
			//log.Println(err)
			return
		}
		vulnerability.Severity = float32(severity)

		vulnerabilities = append(vulnerabilities, vulnerability)
	})

	c.OnHTML(".threat-intel-vulns-table tbody tr", func(h *colly.HTMLElement) {
		err := h.Request.Visit(h.ChildAttr(VulnerabilityLinkEl, "href"))
		if err != nil {
			log.Println(err)
			return
		}
		//vulnerability := &models.Vulnerability{}
		//vulnerability.Name = h.ChildText(VulnerabilityNameEl)
		//
		//slugs := strings.Split(vulnerability.Link, "/")
		//vulnerability.Slug = slugs[len(slugs)-1]
		//
		//severity, err := strconv.ParseFloat(h.ChildText(VulnerabilitySeverityEl), 32)
		//if err != nil {
		//	log.Println(err)
		//	return
		//}
		//
		//vulnerability.Severity = float32(severity)
		//
		//date, err := time.Parse("January 2, 2006", h.ChildText(VulnerabilityDateEl))
		//if err != nil {
		//	log.Println(err)
		//	return
		//}
		//
		//vulnerability.Date = date
		//
		//vulnerabilities = append(vulnerabilities, vulnerability)
	})

	for i := 1; i <= 1; i++ {
		err := c.Visit(Url + "/?page=" + strconv.Itoa(i))

		if err != nil {
			return nil, err
		}
	}

	c.Wait()

	return vulnerabilities, nil
}
